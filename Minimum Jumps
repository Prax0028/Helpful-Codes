#Given an array arr[] of size n of non-negative integers. 
#Each array element represents the maximum length of the jumps that can be made forward from that element. 
#This means if arr[i] = x, then we can jump any distance y such that y â‰¤ x.
#Find the minimum number of jumps to reach the end of the array starting from the first element. 
#If an element is 0, then you cannot move through that element.
#Note:  Return -1 if you can't reach the end of the array.

#Greedy Algorithm
def minJumps(self, arr, n):
	    #code here
	    if n <= 1:
            return 0
    
        if arr[0] == 0:
            return -1
            
	    numJumps = 1
	    maxReach = arr[0]
	    end = arr[0]
	    
	    for i in range(1,n):
	       if i  > end:
	           return -1
	           
	       if i >= n-1:
	           return numJumps
	           
	       maxReach = max(maxReach, i + arr[i])
        
           if i == end:
                if maxReach <= i:
                    return -1
                numJumps += 1
                end = maxReach
	        
	    return -1
